/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Authenticatable = {
  __typename?: 'Authenticatable';
  email: Scalars['String'];
};

export type Credential = {
  __typename?: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

/** Autogenerated return type of LoginUserConfirmRegistrationWithToken. */
export type LoginUserConfirmRegistrationWithTokenPayload = {
  __typename?: 'LoginUserConfirmRegistrationWithTokenPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Null unless user is signed in after confirmation. */
  credentials?: Maybe<Credential>;
};

/** Autogenerated return type of LoginUserLogin. */
export type LoginUserLoginPayload = {
  __typename?: 'LoginUserLoginPayload';
  authenticatable: Authenticatable;
  credentials: Credential;
};

/** Autogenerated return type of LoginUserLogout. */
export type LoginUserLogoutPayload = {
  __typename?: 'LoginUserLogoutPayload';
  authenticatable: Authenticatable;
};

/** Autogenerated return type of LoginUserRegister. */
export type LoginUserRegisterPayload = {
  __typename?: 'LoginUserRegisterPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */
  credentials?: Maybe<Credential>;
};

/** Autogenerated return type of LoginUserResendConfirmationWithToken. */
export type LoginUserResendConfirmationWithTokenPayload = {
  __typename?: 'LoginUserResendConfirmationWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of LoginUserSendPasswordResetWithToken. */
export type LoginUserSendPasswordResetWithTokenPayload = {
  __typename?: 'LoginUserSendPasswordResetWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of LoginUserUpdatePasswordWithToken. */
export type LoginUserUpdatePasswordWithTokenPayload = {
  __typename?: 'LoginUserUpdatePasswordWithTokenPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials?: Maybe<Credential>;
};

export type Mutation = {
  __typename?: 'Mutation';
  loginUserConfirmRegistrationWithToken?: Maybe<LoginUserConfirmRegistrationWithTokenPayload>;
  loginUserLogin?: Maybe<LoginUserLoginPayload>;
  loginUserLogout?: Maybe<LoginUserLogoutPayload>;
  loginUserRegister?: Maybe<LoginUserRegisterPayload>;
  loginUserResendConfirmationWithToken?: Maybe<LoginUserResendConfirmationWithTokenPayload>;
  loginUserSendPasswordResetWithToken?: Maybe<LoginUserSendPasswordResetWithTokenPayload>;
  loginUserUpdatePasswordWithToken?: Maybe<LoginUserUpdatePasswordWithTokenPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationLoginUserConfirmRegistrationWithTokenArgs = {
  confirmationToken: Scalars['String'];
};


export type MutationLoginUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationLoginUserRegisterArgs = {
  confirmUrl?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
};


export type MutationLoginUserResendConfirmationWithTokenArgs = {
  confirmUrl: Scalars['String'];
  email: Scalars['String'];
};


export type MutationLoginUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationLoginUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  /** An example field added by the generator */
  testField: Scalars['String'];
};

export type HogeQueryVariables = Exact<{ [key: string]: never; }>;


export type HogeQuery = { __typename?: 'Query', testField: string };

export type LoginMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = { __typename?: 'Mutation', loginUserLogin?: { __typename?: 'LoginUserLoginPayload', credentials: { __typename?: 'Credential', accessToken: string } } | null };


export const HogeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"hoge"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"testField"}}]}}]} as unknown as DocumentNode<HogeQuery, HogeQueryVariables>;
export const LoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"login"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"loginUserLogin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"Argument","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"credentials"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"accessToken"}}]}}]}}]}}]} as unknown as DocumentNode<LoginMutation, LoginMutationVariables>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Authenticatable = {
  __typename?: 'Authenticatable';
  email: Scalars['String'];
};

export type Credential = {
  __typename?: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

/** Autogenerated return type of LoginUserConfirmRegistrationWithToken. */
export type LoginUserConfirmRegistrationWithTokenPayload = {
  __typename?: 'LoginUserConfirmRegistrationWithTokenPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Null unless user is signed in after confirmation. */
  credentials?: Maybe<Credential>;
};

/** Autogenerated return type of LoginUserLogin. */
export type LoginUserLoginPayload = {
  __typename?: 'LoginUserLoginPayload';
  authenticatable: Authenticatable;
  credentials: Credential;
};

/** Autogenerated return type of LoginUserLogout. */
export type LoginUserLogoutPayload = {
  __typename?: 'LoginUserLogoutPayload';
  authenticatable: Authenticatable;
};

/** Autogenerated return type of LoginUserRegister. */
export type LoginUserRegisterPayload = {
  __typename?: 'LoginUserRegisterPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */
  credentials?: Maybe<Credential>;
};

/** Autogenerated return type of LoginUserResendConfirmationWithToken. */
export type LoginUserResendConfirmationWithTokenPayload = {
  __typename?: 'LoginUserResendConfirmationWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of LoginUserSendPasswordResetWithToken. */
export type LoginUserSendPasswordResetWithTokenPayload = {
  __typename?: 'LoginUserSendPasswordResetWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of LoginUserUpdatePasswordWithToken. */
export type LoginUserUpdatePasswordWithTokenPayload = {
  __typename?: 'LoginUserUpdatePasswordWithTokenPayload';
  authenticatable: Authenticatable;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials?: Maybe<Credential>;
};

export type Mutation = {
  __typename?: 'Mutation';
  loginUserConfirmRegistrationWithToken?: Maybe<LoginUserConfirmRegistrationWithTokenPayload>;
  loginUserLogin?: Maybe<LoginUserLoginPayload>;
  loginUserLogout?: Maybe<LoginUserLogoutPayload>;
  loginUserRegister?: Maybe<LoginUserRegisterPayload>;
  loginUserResendConfirmationWithToken?: Maybe<LoginUserResendConfirmationWithTokenPayload>;
  loginUserSendPasswordResetWithToken?: Maybe<LoginUserSendPasswordResetWithTokenPayload>;
  loginUserUpdatePasswordWithToken?: Maybe<LoginUserUpdatePasswordWithTokenPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationLoginUserConfirmRegistrationWithTokenArgs = {
  confirmationToken: Scalars['String'];
};


export type MutationLoginUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationLoginUserRegisterArgs = {
  confirmUrl?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
};


export type MutationLoginUserResendConfirmationWithTokenArgs = {
  confirmUrl: Scalars['String'];
  email: Scalars['String'];
};


export type MutationLoginUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};


export type MutationLoginUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  /** An example field added by the generator */
  testField: Scalars['String'];
};

export type HogeQueryVariables = Exact<{ [key: string]: never; }>;


export type HogeQuery = { __typename?: 'Query', testField: string };

export type LoginMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = { __typename?: 'Mutation', loginUserLogin?: { __typename?: 'LoginUserLoginPayload', credentials: { __typename?: 'Credential', accessToken: string } } | null };


export const HogeDocument = gql`
    query hoge {
  testField
}
    `;

/**
 * __useHogeQuery__
 *
 * To run a query within a React component, call `useHogeQuery` and pass it any options that fit your needs.
 * When your component renders, `useHogeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHogeQuery({
 *   variables: {
 *   },
 * });
 */
export function useHogeQuery(baseOptions?: Apollo.QueryHookOptions<HogeQuery, HogeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<HogeQuery, HogeQueryVariables>(HogeDocument, options);
      }
export function useHogeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HogeQuery, HogeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<HogeQuery, HogeQueryVariables>(HogeDocument, options);
        }
export type HogeQueryHookResult = ReturnType<typeof useHogeQuery>;
export type HogeLazyQueryHookResult = ReturnType<typeof useHogeLazyQuery>;
export type HogeQueryResult = Apollo.QueryResult<HogeQuery, HogeQueryVariables>;
export const LoginDocument = gql`
    mutation login($email: String!, $password: String!) {
  loginUserLogin(email: $email, password: $password) {
    credentials {
      accessToken
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;